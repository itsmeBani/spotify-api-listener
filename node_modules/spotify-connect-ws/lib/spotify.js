'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setVolume = exports.previousTrack = exports.nextTrack = exports.seek = exports.setPlayState = exports.transferPlayback = exports.playTrack = exports.getPlayerState = undefined;

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var API_URL = 'https://api.spotify.com/v1';

var getPlayerState = exports.getPlayerState = function getPlayerState(accessToken) {
  return new Promise(function (resolve, reject) {
    (0, _nodeFetch2.default)(API_URL + '/me/player', {
      headers: {
        Authorization: 'Bearer ' + accessToken,
        'Content-Type': 'application/json'
      }
    }).then(function (response) {
      if (response.status === 202) {
        return resolve({});
      }
      return response;
    }).then(function (r) {
      return r.json();
    }).then(function (response) {
      if (response.error) {
        return reject(response.error.message);
      }

      resolve(response);
    }).catch(reject);
  });
};

var playTrack = function playTrack(accessToken, _ref) {
  var id = _ref.id,
      args = _objectWithoutProperties(_ref, ['id']);

  return new Promise(function (resolve, reject) {
    var body = {};
    if (id) {
      body.uris = ['spotify:track:' + id];
    } else {
      Object.keys(args).forEach(function (key) {
        if (args[key]) {
          body[key] = args[key];
        }
      });
    }

    (0, _nodeFetch2.default)(API_URL + '/me/player/play', {
      method: 'PUT',
      headers: {
        Authorization: 'Bearer ' + accessToken,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    }).then(function (r) {
      if (r.status === 204) {
        return resolve();
      }

      return reject(r.statusText);
    }).catch(reject);
  });
};

exports.playTrack = playTrack;
var transferPlayback = exports.transferPlayback = function transferPlayback(accessToken, _ref2) {
  var id = _ref2.id,
      _ref2$play = _ref2.play,
      play = _ref2$play === undefined ? false : _ref2$play;

  return new Promise(function (resolve, reject) {
    var body = {
      device_ids: [id],
      play: play
    };
    (0, _nodeFetch2.default)(API_URL + '/me/player', {
      method: 'PUT',
      headers: {
        Authorization: 'Bearer ' + accessToken,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    }).then(function (r) {
      return r.json();
    }).then(function (response) {
      if (response.error) {
        return reject(response.error.message);
      }

      resolve(response);
    }).catch(reject);
  });
};

var setPlayState = exports.setPlayState = function setPlayState(accessToken, playState) {
  return (0, _nodeFetch2.default)(API_URL + '/me/player/' + playState, {
    method: 'PUT',
    headers: {
      Authorization: 'Bearer ' + accessToken,
      'Content-Type': 'application/json'
    }
  });
};

var seek = exports.seek = function seek(accessToken, positionMs) {
  return (0, _nodeFetch2.default)(API_URL + '/me/player/seek?position_ms=' + positionMs, {
    method: 'PUT',
    headers: {
      Authorization: 'Bearer ' + accessToken,
      'Content-Type': 'application/json'
    }
  });
};

var nextTrack = exports.nextTrack = function nextTrack(accessToken) {
  return (0, _nodeFetch2.default)(API_URL + '/me/player/next', {
    method: 'POST',
    headers: {
      Authorization: 'Bearer ' + accessToken,
      'Content-Type': 'application/json'
    }
  });
};

var previousTrack = exports.previousTrack = function previousTrack(accessToken) {
  return (0, _nodeFetch2.default)(API_URL + '/me/player/previous', {
    method: 'POST',
    headers: {
      Authorization: 'Bearer ' + accessToken,
      'Content-Type': 'application/json'
    }
  });
};

var setVolume = exports.setVolume = function setVolume(accessToken, volume) {
  return (0, _nodeFetch2.default)(API_URL + '/me/player/volume?volume_percent=' + volume, {
    method: 'PUT',
    headers: {
      Authorization: 'Bearer ' + accessToken,
      'Content-Type': 'application/json'
    }
  });
};